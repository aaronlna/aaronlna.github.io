{"version":3,"sources":["components/Splash.tsx","transitions/Fade.tsx","containers/HomePage.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Splash","react_default","a","createElement","className","Fade","CSSTransition","Object","assign","this","props","classNames","HomePage","state","showPage","showSplash","_this","setState","_this2","setTimeout","Fade_Fade","appear","onExited","timeout","TransitionGroup","component","renderSplash","renderPage","React","Component","App","nextProps","location","pathname","key","react_router","exact","path","Boolean","window","hostname","match","ReactDOM","render","AppWithRouter","withRouter","react_router_dom","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAEe,SAASA,IACtB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,mBCAiBC,mLAEjB,OAAOJ,EAAAC,EAAAC,cAACG,EAAA,EAADC,OAAAC,OAAA,GAAmBC,KAAKC,MAAxB,CAA+BC,WAAW,iBAFnBL,KCObM,6MACnBC,MAAuB,CACrBC,UAAU,EACVC,YAAY,KAOdD,SAAW,WACTE,EAAKC,SAAS,CAAEH,UAAU,wFALR,IAAAI,EAAAT,KAClBU,WAAW,kBAAMD,EAAKD,SAAS,CAAEF,YAAY,KAAU,2CAQvD,OAAOd,EAAAC,EAAAC,cAAA,mDAIP,OACEF,EAAAC,EAAAC,cAACiB,EAAD,CAAMC,QAAM,EAACC,SAAUb,KAAKK,SAAUS,QAAS,KAC7CtB,EAAAC,EAAAC,cAACH,EAAD,wCAMJ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAiBC,UAAW,MACxBhB,KAAKI,MAAME,YAAcN,KAAKiB,eAC9BjB,KAAKI,MAAMC,UAAYL,KAAKkB,sBA/BFC,IAAMC,WCLtCC,uMACkBC,GACpB,OAAOtB,KAAKC,MAAMsB,SAASC,WAAaF,EAAUC,SAASC,0CAGpD,IACDD,EAAavB,KAAKC,MAAlBsB,SACN,OACE/B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAiBpB,UAAU,aACzBH,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAeK,WAAW,OAAOuB,IAAKF,EAASE,IAAKX,QAAS,KAC3DtB,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAQH,SAAUA,GAChB/B,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOV,UAAWb,EAAUwB,OAAK,EAACC,KAAK,gBAXjCT,IAAMC,YCMJS,QACW,cAA7BC,OAAOP,SAASQ,UAEe,UAA7BD,OAAOP,SAASQ,UAEhBD,OAAOP,SAASQ,SAASC,MACvB,iECZNC,IAASC,OAAO1C,EAAAC,EAAAC,cFmBD,WACb,IAAMyC,EAAgBC,YAAWf,GACjC,OAAO7B,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KAAe7C,EAAAC,EAAAC,cAACyC,EAAD,QErBR,MAASG,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0af9238b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Splash() {\r\n  return (\r\n    <div className=\"no-select splash\">\r\n      hello\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport './Fade.css'\r\n\r\nexport default class Fade extends CSSTransition {\r\n  render() {\r\n    return <CSSTransition {...this.props} classNames=\"fade\" />;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { RouteChildrenProps } from 'react-router';\r\nimport Splash from '../components/Splash';\r\nimport Fade from '../transitions/Fade';\r\nimport { TransitionGroup } from 'react-transition-group';\r\n\r\ninterface HomePageState {\r\n  showPage: boolean;\r\n  showSplash: boolean;\r\n};\r\n\r\nexport default class HomePage extends React.Component<RouteChildrenProps, HomePageState> {\r\n  state: HomePageState = {\r\n    showPage: false,\r\n    showSplash: true\r\n  };\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => this.setState({ showSplash: false }), 2500);\r\n  }\r\n\r\n  showPage = () => {\r\n    this.setState({ showPage: true });\r\n  }\r\n\r\n  renderPage() {\r\n    return <div />;\r\n  }\r\n\r\n  renderSplash() {\r\n    return (\r\n      <Fade appear onExited={this.showPage} timeout={700}>\r\n        <Splash />\r\n      </Fade>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"page\">\r\n        <TransitionGroup component={null}>\r\n          { this.state.showSplash && this.renderSplash() }\r\n          { this.state.showPage && this.renderPage() }\r\n        </TransitionGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport { BrowserRouter, Route, RouteComponentProps, Switch, withRouter } from 'react-router-dom';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport HomePage from './containers/HomePage'\nimport './App.css';\n\nclass App extends React.Component<RouteComponentProps> {\n  shouldComponentUpdate(nextProps: { location: { pathname: string } }) {\n    return this.props.location.pathname !== nextProps.location.pathname;\n  }\n\n  render() {\n    let { location } = this.props;\n    return (\n      <TransitionGroup className=\"container\">\n        <CSSTransition classNames=\"page\" key={location.key} timeout={700}>\n          <Switch location={location}>\n            <Route component={HomePage} exact path=\"/\" />\n          </Switch>\n        </CSSTransition>\n      </TransitionGroup>\n    );\n  }\n}\n\nexport default function AppWithRouter() {\n  const AppWithRouter = withRouter(App);\n  return <BrowserRouter><AppWithRouter /></BrowserRouter>;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}